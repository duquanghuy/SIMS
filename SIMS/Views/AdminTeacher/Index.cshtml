@{
    ViewData["Title"] = "Manage Teachers";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h2>Manage Teachers</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTeacherModal">
        <i class="fa fa-plus"></i> Add New Teacher
    </button>
</div>

<!-- Add New Teacher Modal -->
<div class="modal fade" id="addTeacherModal" tabindex="-1" aria-labelledby="addTeacherModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="createTeacherForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTeacherModalLabel">Add New Teacher</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" name="FirstName" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" name="LastName" class="form-control" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- View/Edit Modal -->
<div class="modal fade" id="viewTeacherModal" tabindex="-1" aria-labelledby="viewTeacherModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editTeacherForm">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewTeacherModalLabel">Teacher Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" name="OriginalTeacherId" id="viewTeacherId" />
                    <input type="hidden" name="OriginalFirstName" id="originalFirstName" />
                    <input type="hidden" name="OriginalLastName" id="originalLastName" />

                    <div class="mb-3">
                        <label class="form-label">Teacher ID</label>
                        <input type="text" class="form-control" disabled id="viewTeacherIdDisplay" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input type="text" class="form-control" name="FirstName" id="viewFirstName" disabled />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input type="text" class="form-control" name="LastName" id="viewLastName" disabled />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="viewTeacherEmail" disabled />
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" id="editBtn" class="btn btn-secondary">Edit</button>
                    <button type="submit" class="btn btn-primary" id="saveBtn" disabled>Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<h3 class="mt-4 mb-2">Teacher List</h3>

@await Component.InvokeAsync("Table", new
    {
        items = ViewData["Teachers"],
        columns = ViewData["Columns"]
    })

@{
    var paginationModel = ViewData["Pagination"] as SIMS.ViewModels.PaginationModel;
}
@if (paginationModel != null)
{
    @await Component.InvokeAsync("Pagination", new
        {
            currentPage = paginationModel.CurrentPage,
            pageSize = paginationModel.PageSize,
            totalItems = paginationModel.TotalItems,
            action = paginationModel.Action,
            controller = paginationModel.Controller,
            routeValues = paginationModel.RouteValues
        })
}

@section Scripts {
    <script>
        // Create Teacher AJAX
        $('#createTeacherForm').on('submit', function (e) {
            e.preventDefault();
            $.ajax({
                url: '@Url.Action("CreateTeacher", "AdminTeacher")',
                method: 'POST',
                data: $(this).serialize(),
                success: function () {
                    alert('Teacher created successfully!');
                    window.location.reload();
                },
                error: function (xhr) {
                    alert('❌ Error: ' + xhr.responseText);
                }
            });
        });

        // View/Edit Modal
        $('#viewTeacherModal').on('show.bs.modal', function (event) {
            var button = $(event.relatedTarget);
            var teacher = button.data('teacher');

            $('#viewTeacherId').val(teacher.TeacherId);
            $('#viewTeacherIdDisplay').val(teacher.TeacherId);
            $('#viewFirstName').val(teacher.FirstName);
            $('#viewLastName').val(teacher.LastName);
            $('#originalFirstName').val(teacher.FirstName);
            $('#originalLastName').val(teacher.LastName);
             $('#viewTeacherEmail').val(teacher.Email);
            $('#editBtn').show();
            $('#saveBtn').prop('disabled', true);
            $('#viewFirstName, #viewLastName').prop('disabled', true);
        });

        $('#editBtn').on('click', function () {
            $('#viewFirstName, #viewLastName').prop('disabled', false);
            $('#saveBtn').prop('disabled', false);
            $(this).hide();
        });

        $('#editTeacherForm').on('submit', function (e) {
            e.preventDefault();
            $.ajax({
                url: '@Url.Action("UpdateTeacher", "AdminTeacher")',
                method: 'POST',
                data: $(this).serialize(),
                success: function () {
                    alert('Teacher updated successfully!');
                    $('#viewTeacherModal').modal('hide');
                    window.location.reload();
                },
                error: function (xhr) {
                    alert('❌ Error: ' + xhr.responseText);
                }
            });
        });
        function deleteTeacher(teacherId) {
            if (!confirm('Are you sure you want to delete this teacher?')) return;
            $.ajax({
                url: '@Url.Action("Delete", "AdminTeacher")' + '?teacherId=' + teacherId,
                method: 'GET',
                success: function () {
                    alert('Teacher deleted successfully!');
                    window.location.reload();
                },
                error: function (xhr) {
                    alert('❌ Error: ' + xhr.responseText);
                }
            });
        }

        // Delete logic will be attached to table rows via ViewComponent
    </script>
}
