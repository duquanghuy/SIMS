using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using SIMS.Data;
using SIMS.Models;
using SIMS.Models.ViewModels;

namespace SIMS.Controllers.Admin
{
    [Authorize(Roles = "Admin")]
    public class AdminClassController : Controller
    {
        private readonly ApplicationDbContext _context;
        public AdminClassController(ApplicationDbContext context) => _context = context;

        // GET: Admin/AdminClass
        public async Task<IActionResult> Index()
        {
            var classes = await _context.Classes
                .Include(c => c.Subject)
                .Include(c => c.Teacher)
                .ToListAsync();
            return View(classes);
        }

        // GET: Admin/AdminClass/Create
        public IActionResult Create()
        {
            var vm = new ClassViewModel();
            PopulateDropdowns(vm);
            return View(vm);
        }

        // POST: Admin/AdminClass/Create
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(ClassViewModel vm)
        {
            if (!ModelState.IsValid)
            {
                PopulateDropdowns(vm);
                return View(vm);
            }

            var cls = new Class
            {
                // ClassId is auto-generated by the DB
                SubjectId = vm.SubjectId,
                TeacherId = vm.TeacherId
            };

            _context.Classes.Add(cls);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        // GET: Admin/AdminClass/Edit/5
        public async Task<IActionResult> Edit(int id)
        {
            var cls = await _context.Classes.FindAsync(id);
            if (cls == null) return NotFound();

            var vm = new ClassViewModel
            {
                ClassId = cls.ClassId,
                SubjectId = cls.SubjectId,
                TeacherId = cls.TeacherId
            };
            PopulateDropdowns(vm);
            return View(vm);
        }

        // POST: Admin/AdminClass/Edit/5
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, ClassViewModel vm)
        {
            if (id != vm.ClassId) return BadRequest();
            if (!ModelState.IsValid)
            {
                PopulateDropdowns(vm);
                return View(vm);
            }

            var cls = await _context.Classes.FindAsync(id);
            if (cls == null) return NotFound();

            cls.SubjectId = vm.SubjectId;
            cls.TeacherId = vm.TeacherId;

            _context.Classes.Update(cls);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        // GET: Admin/AdminClass/Delete/5
        public async Task<IActionResult> Delete(int id)
        {
            var cls = await _context.Classes
                .Include(c => c.Subject)
                .Include(c => c.Teacher)
                .FirstOrDefaultAsync(c => c.ClassId == id);

            if (cls == null) return NotFound();
            return View(cls);
        }

        // POST: Admin/AdminClass/Delete/5
        // POST: Admin/AdminClass/Delete/5
        [HttpPost, ActionName("Delete"), ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            // 1) Remove any enrollments for this class
            var enrollments = _context.Enrollments
                                      .Where(e => e.ClassId == id);
            _context.Enrollments.RemoveRange(enrollments);

            // 2) Now remove the class
            var cls = await _context.Classes.FindAsync(id);
            if (cls != null)
            {
                _context.Classes.Remove(cls);
            }

            // 3) Commit both deletes in one go
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }


        #region Helpers

        private void PopulateDropdowns(ClassViewModel vm = null)
        {
            var subjects = _context.Subjects
                .OrderBy(s => s.Code)
                .Select(s => new { s.SubjectId, Display = s.Code + " – " + s.Title });

            var teachers = _context.Teachers
                .Select(t => new
                {
                    t.TeacherId,
                    FullName = t.FirstName + " " + t.LastName
                })
                .OrderBy(t => t.FullName);

            var subjectList = new SelectList(
                subjects,
                "SubjectId",
                "Display",
                vm?.SubjectId);
            var teacherList = new SelectList(
                teachers,
                "TeacherId",
                "FullName",
                vm?.TeacherId);

            if (vm != null)
            {
                vm.Subjects = subjectList;
                vm.Teachers = teacherList;
            }
            else
            {
                ViewData["Subjects"] = subjectList;
                ViewData["Teachers"] = teacherList;
            }
        }


        public async Task<IActionResult> Enrollments(int classId)
        {
            // 1) Load the class header
            var cls = await _context.Classes
                            .Include(c => c.Subject)
                            .FirstOrDefaultAsync(c => c.ClassId == classId);
            if (cls == null) return NotFound();

            // 2) Load existing enrollments + students
            var enrolled = await _context.Enrollments
                                      .Where(e => e.ClassId == classId)
                                      .Include(e => e.Student)
                                      .ToListAsync();

            // Extract just the StudentIds in‐memory
            var enrolledIds = enrolled
                                 .Select(e => e.StudentId)
                                 .ToList();

            // 3) Load available students (WHERE StudentId NOT IN enrolledIds)
            var available = await _context.Students
                                      .Where(s => !enrolledIds.Contains(s.StudentId))
                                      .Select(s => new {
                                          s.StudentId,
                                          FullName = s.FirstName + " " + s.LastName
                                      })
                                      .ToListAsync();

            // 4) Package into a ViewModel
            var vm = new EnrollmentViewModel
            {
                ClassId = classId,
                ClassDisplay = $"{cls.Subject.Code} – {cls.Subject.Title}",
                Enrolled = enrolled,
                Available = new SelectList(available, "StudentId", "FullName")
            };
            return View(vm);
        }

        // POST: Admin/AdminClass/Enroll
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Enroll(int classId, List<string> selectedStudentIds)
        {
            // 1) If nothing was picked, rebuild the VM and show an error
            if (selectedStudentIds == null || !selectedStudentIds.Any())
            {
                // Reload class header
                var cls = await _context.Classes
                                .Include(c => c.Subject)
                                .FirstOrDefaultAsync(c => c.ClassId == classId);
                if (cls == null) return NotFound();

                // Reload existing enrollments
                var enrolled = await _context.Enrollments
                                          .Where(e => e.ClassId == classId)
                                          .Include(e => e.Student)
                                          .ToListAsync();
                var enrolledIds = enrolled.Select(e => e.StudentId).ToList();

                // Reload available students
                var available = await _context.Students
                                          .Where(s => !enrolledIds.Contains(s.StudentId))
                                          .Select(s => new {
                                              s.StudentId,
                                              FullName = s.FirstName + " " + s.LastName
                                          })
                                          .ToListAsync();

                var vm = new EnrollmentViewModel
                {
                    ClassId = classId,
                    ClassDisplay = $"{cls.Subject.Code} – {cls.Subject.Title}",
                    Enrolled = enrolled,
                    Available = new SelectList(available, "StudentId", "FullName"),
                    SelectedStudentIds = new List<string>()  // ensure it's non-null
                };

                // Tie the error to our multi-select property
                ModelState.AddModelError(
                    nameof(vm.SelectedStudentIds),
                    "Please select at least one student to enroll."
                );

                return View("Enrollments", vm);
            }

            // 2) Otherwise, enroll each selected student (if not already)
            foreach (var studentId in selectedStudentIds)
            {
                var already = await _context.Enrollments
                    .AnyAsync(e => e.ClassId == classId && e.StudentId == studentId);
                if (!already)
                {
                    _context.Enrollments.Add(new Enrollment
                    {
                        ClassId = classId,
                        StudentId = studentId,
                        EnrolledOn = DateTime.UtcNow
                    });
                }
            }
            await _context.SaveChangesAsync();

            // 3) Redirect back to the enrollment list
            return RedirectToAction(nameof(Enrollments), new { classId });
        }




        // POST: Admin/AdminClass/Unenroll
        [HttpPost, ValidateAntiForgeryToken]
        public async Task<IActionResult> Unenroll(int enrollmentId, int classId)
        {
            var enrollment = await _context.Enrollments.FindAsync(enrollmentId);
            if (enrollment != null)
            {
                _context.Enrollments.Remove(enrollment);
                await _context.SaveChangesAsync();
            }
            return RedirectToAction(nameof(Enrollments), new { classId });
        }
        #endregion
    }
}
